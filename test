#!/usr/bin/ruby --disable-gems

# We're being very lazy here and assuming macOS with some preconditions:
# /bin/bash is bash 3.2
# /usr/local/bin/bash is bash 4+
# /usr/local/bin/zsh is installed

require_relative 'shell'

INPUT = <<EOF
source hookbook.sh
f() { echo $1; }
hookbook_add_hook f
: @BEGIN@
echo ok
echo ok | wc -l
source hookbook.sh
echo ok | wc -l
: @DONE@
EOF

# We call DEBUG/preexec a lot of times when we source hookbook.sh the second
# time. I wonder if we can cut that down to one.
BASH_EXPECT = <<EOF
preexec
precmd
> echo ok
preexec
ok
precmd
> echo ok | wc -l
preexec
preexec
       1
precmd
> source hookbook.sh
preexec
preexec
preexec
precmd
> echo ok | wc -l
preexec
preexec
       1
precmd
EOF

ZSH_EXPECT = BASH_EXPECT.gsub(/(preexec\n)+/, "preexec\n")

def between(array, before, after)
  index = array.index(before)
  return [] unless index
  array = array[index+1..-1]
  index = array.index(after)
  return [] unless index
  array[0...index]
end

def run_test(expect, *argv, aliases: false)
  sh = Shell.new(*argv, prompt: '> ').send_commands(INPUT)
  lines = sh.output
  sh.close

  output_lines = between(lines, "> : @BEGIN@\n", "> : @DONE@\n")

  if output_lines.join == expect
    puts("OK #{argv.first}")
  else
    puts("NOT OK #{argv.first}")
    puts("HAVE: #{output_lines.join.inspect}")
    puts("WANT: #{expect.inspect}")
    abort('test failure')
  end
end

run_test(ZSH_EXPECT,  '/usr/local/bin/zsh', '--no-rcs', '--no-globalrcs')
run_test(BASH_EXPECT, '/bin/bash', '--noprofile', '--norc')
run_test(BASH_EXPECT, '/usr/local/bin/bash', '--noprofile', '--norc')
